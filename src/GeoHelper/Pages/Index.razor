@page "/"

@using GeoHelper.Models
@using Color = MudBlazor.Color
@using Polygon = GeoHelper.Models.Polygon
@using GeoHelper.Utils
@inject HttpClient Http
@implements IAsyncDisposable

@inject IJSRuntime JsRuntime
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<br/>
<MudContainer MaxWidth="MaxWidth.ExtraLarge">
    <MudGrid Spacing="0">
        <MudItem xs="12" sm="7">
            <div id="map" style="width: 100%; height: 700px; background-color: lightgray;"/>
        </MudItem>
        <MudItem xs="12" sm="5">
            <div class="d-flex" style="justify-content: center">
                <MudButton Variant="Variant.Filled" class="mb-1"
                           Color="Color.Primary"
                           OnClick="@(() => { _polygons.Add(new Polygon() { HexColor = "#0000ff" }); })">
                    Add Additional Polygon
                </MudButton>
                <MudSpacer/>
                <MudButton Variant="Variant.Filled" class="mb-1"
                           Color="Color.Primary"
                           OnClick="OpenImport">
                    Import Shapefile
                </MudButton>
                <MudSpacer/>
                <MudSwitch T="bool" Checked="_toggleHexes"
                           CheckedChanged="async () => { _toggleHexes = !_toggleHexes; HandleCheck(); }"
                           Label="H3 Hexes"
                           Color="Color.Info"/>
                <MudSpacer/>
                <MudSelect T="int" @bind-Value="@_hexResolution"
                           Label="Resolution" Variant="Variant.Outlined"
                           AnchorOrigin="Origin.BottomCenter" Style="width: 50px">
                    @for (var i = 1; i <= 10; i++)
                    {
                        <MudSelectItem T="int" Value="i"/>
                    }
                </MudSelect>
            </div>
            @foreach (var polygon in _polygons)
            {
                <MudPaper Class="pa-4">
                    <div class="d-flex">
                        <MudTextField Label="Name" Class="m-3" Variant="Variant.Outlined"
                                      @bind-Value="polygon.Name" For="@(() => polygon.Name)"/>
                        <div style="flex-grow: 0.05"/>
                        <MudSelect Label="Type" class="m-3" Variant="Variant.Outlined"
                                   T="PolygonTypes" @bind-Value="@polygon.Type" For="@(() => polygon.Type)">
                            <MudSelectItem T="PolygonTypes" Value="PolygonTypes.Wkt"></MudSelectItem>
                            <MudSelectItem T="PolygonTypes" Value="PolygonTypes.GeoJson"></MudSelectItem>
                        </MudSelect>
                        <div style="flex-grow: 0.05"/>
                        <MudColorPicker @bind-Text="@polygon.HexColor" Label="Spectrum"
                                        ColorPickerView="ColorPickerView.Spectrum"/>
                        <div style="flex-grow: 0.05"/>
                        <MudIconButton Icon="@Icons.Material.Outlined.ChangeCircle" OnClick="async () => { await OpenConvert(polygon.RawInput); }"/>
                        <div style="flex-grow: 0.05"/>
                        <MudButtonGroup Color="Color.Primary" Variant="Variant.Outlined" VerticalAlign="true" OverrideStyles="false">
                            <MudButton Variant="Variant.Outlined" class="ms-3 me-3"
                                       OnClick="@(async () => { await AddPolygon(polygon); })"
                                       Color="Color.Success">
                                Create
                            </MudButton>
                            <MudButton Variant="Variant.Outlined" class="ms-3 me-3 mt-1"
                                       OnClick="@(async () => { await RemovePolygon(polygon.Name); })"
                                       Color="Color.Error">
                                Remove
                            </MudButton>
                        </MudButtonGroup>
                    </div>
                    <div class="d-flex">
                        <div style="flex-grow: 0.05"/>
                        <MudTextField Label="Polygon" Class="mt-3" Variant="Variant.Outlined" MaxLength="9000000"
                                      @bind-Value="polygon.RawInput" For="@(() => polygon.RawInput)"/>
                        <div style="flex-grow: 0.05"/>
                    </div>
                </MudPaper>
                <br/>
            }
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    /// <summary>
    /// The action to change a nonstatic value from inside a static method.
    /// Is this a hack? I'm not sure, an example like this was in some msft docs.
    /// </summary>
    private static Func<string, Task>? _changeValueAction;
    
    /// <summary>
    /// The JS module to use.
    /// </summary>
    private IJSObjectReference? _module;
    
    /// <summary>
    /// The polygons to display.
    /// </summary>
    private readonly List<Polygon> _polygons = new();
    
    /// <summary>
    /// The h3 hex IDs currently on the map. 
    /// </summary>
    private List<string> _hexIds = new();
    
    /// <summary>
    /// The current hex toggle switch value.
    /// </summary>
    private bool _toggleHexes = false;
    
    /// <summary>
    /// The current hex resolution to use.
    /// </summary>
    private int _hexResolution = 1;
    
    /// <summary>
    /// The number of polygons created via leaflet draw this session.
    /// </summary>
    private int _leafletPolygonCount = 1;

    
    /// <summary>
    /// The JS Invokable method that creates polygons from leaflet draw.
    /// </summary>
    /// <param name="obj"></param>
    [JSInvokable("AddPolygonFromJs")]
    public static async Task AddPolygonFromJs(string obj)
    {
        if (_changeValueAction is {} actionAsync)
        {
            await actionAsync(obj);
        }
    }
    
    /// <summary>
    /// Creates a polygon from leaflet draw.
    /// </summary>
    /// <param name="value">The geojson string.</param>
    private async Task CreatePolygonFromLeaflet(string value)
    {
        var geo = GeoUtils.GeoJsonStringToPolygon(value);
        var poly = new Polygon
        {
            Name = $"Leaflet Polygon {_leafletPolygonCount++}",
            RawGeoJson = value,
            RawInput = geo.AsText(),
            Type = PolygonTypes.FromLeaflet
        };

        if (_polygons is [{ RawInput: null }] || _polygons[0].RawInput?.Trim() == string.Empty)
        {
            _polygons[0] = poly;
        }
        else
        {
            _polygons.Add(poly);
        }
        StateHasChanged();
    }
    
    /// <summary>
    /// Code that runs on render.
    /// </summary>
    /// <param name="firstRender">If this is the first render.</param>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        _changeValueAction = CreatePolygonFromLeaflet;
        if (firstRender)
        {
            _module = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./leaflet.js");
            if (_module != null)
            {
                await _module.InvokeAsync<string>("load_map");

                var defaultPolygon = new Polygon
                {
                    Name = "Default WKT",
                    HexColor = "#0000ff",
                    RawInput = await Http.GetStringAsync("sample-data/defaultWkt.txt"),
                    Type = PolygonTypes.Wkt
                };

                _polygons.Add(defaultPolygon);
                await AddPolygon(defaultPolygon);
                StateHasChanged();
            }
        }
    }

    /// <summary>
    /// Handles the H3 hex toggle switch.
    /// </summary>
    private async Task HandleCheck()
    {
        var random = new Random();
        var bounds = await _module!.InvokeAsync<LeafletViewport>("get_viewport");
        
        if (_toggleHexes)
        {
            foreach (var poly in _polygons)
            {
                var color = $"#{random.Next(0x1000000):X6}";
                try
                {
                    var hexes = GeoUtils.GetH3HexesForPolygon(poly, _hexResolution, bounds);
                    foreach (var (id, hex) in hexes)
                    {
                        _hexIds.Add(id);
                        await _module!.InvokeVoidAsync("add_geojson", hex, id, color);
                    }
                }
                catch (ArgumentException e)
                {
                    Console.WriteLine(e);
                    Snackbar.Add(e.Message, Severity.Error);
                }
            }    
        }
        else
        {
            foreach (var id in _hexIds)
            {
                await RemovePolygon(id);
            }
            _hexIds = new();
        }
    }
    
    /// <summary>
    /// Adds a single polygon to the map.
    /// </summary>
    /// <param name="poly">The polygon to add.</param>
    private async Task AddPolygon(Polygon poly)
    {
        if (_module != null)
        {
            try
            {
                if (poly.Name is null || poly.Name.Trim() == string.Empty)
                {
                    Snackbar.Add("Name cannot be empty.", Severity.Error);
                    return;
                }                
                
                GeoUtils.PreparePolygon(poly);

                // Ensure there are no duplicates 
                if (_polygons.All(x => x.Name != poly.Name))
                {
                    Snackbar.Add("Cannot add duplicate names.", Severity.Error);
                    return;
                }

                // Add the geojson to the map
                await _module.InvokeVoidAsync("add_geojson", poly.RawGeoJson, poly.Name, poly.HexColor);
            }
            catch (ArgumentException e)
            {
                Snackbar.Add(e.Message, Severity.Error);
            }
        }
    }

    /// <summary>
    /// Adds multiple polygons to the map. 
    /// </summary>
    /// <param name="polygons">The polygons to add.</param>
    private async Task AddPolygons(List<Polygon> polygons)
    {
        foreach (var poly in polygons)
        {
            await AddPolygon(poly);
        }
    }

    /// <summary>
    /// Remove a polygon from the name based on the polygon name.
    /// </summary>
    /// <param name="name">The name of the polygon to remove.</param>
    private async Task RemovePolygon(string? name)
    {
        if (_module != null)
        {
            // If the name of the polygon isn't null, attempt to remove it from the map via js interop.
            if (!string.IsNullOrEmpty(name))
            {
                await _module.InvokeVoidAsync("remove_geo", name);
            }
            var toRemove = _polygons.FirstOrDefault(x => x.Name == name);

            if (toRemove is not null)
            {
                // if we have more than one polygon, just remove it from the list
                if (_polygons.Count > 1)
                {
                    _polygons.Remove(toRemove);
                }
                // if we only have one, just null out the values
                else
                {
                    toRemove.Name = null;
                    toRemove.RawGeoJson = null;
                    toRemove.RawInput = null;
                    toRemove.HexColor = "#0000ff";
                }
            }
        }
    }

    /// <summary>
    /// Opens an input dialog.
    /// </summary>
    private async Task OpenImport()
    {
        DialogParameters parameters = new()
        {
            { "PolygonsAddedMethod", EventCallback.Factory.Create<List<Polygon>>(this, AddPolygons) }
        };
        var options = new DialogOptions() { MaxWidth = MaxWidth.Medium, FullWidth = true };
        await DialogService.ShowAsync<FileImportDialog>("File Import", parameters, options);
    }

    private async Task OpenConvert(string? input)
    {
        if (input is null)
        {
            Snackbar.Add("Something has gone wrong!", Severity.Error);
            return;
        }

        DialogParameters parameters = new()
        {
            { "Input", input }
        };
        var options = new DialogOptions { MaxWidth = MaxWidth.Medium };
        await DialogService.ShowAsync<ConversionDialog>("Convert", parameters, options);
    }

    /// <summary>
    /// Does some cleanup.
    /// </summary>
    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (_module is not null)
        {
            await _module.DisposeAsync();
        }
    }

}
