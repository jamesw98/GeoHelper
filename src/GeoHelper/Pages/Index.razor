@page "/"

@using NetTopologySuite.IO
@using GeoHelper.Models
@using H3.Algorithms
@using H3.Extensions
@using NetTopologySuite.Geometries
@using Color = MudBlazor.Color
@using Polygon = GeoHelper.Models.Polygon
@using System.Drawing
@using GeoHelper.Utils
@using H3
@inject HttpClient Http
@implements IAsyncDisposable

@inject IJSRuntime JsRuntime
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<br/>
<MudContainer MaxWidth="MaxWidth.ExtraLarge">
    <MudGrid Spacing="0">
        <MudItem xs="12" sm="7">
            @if (_hexResolution >= 5)
            {
                <MudAlert Elevation="10" Variant="Variant.Filled" Severity="Severity.Warning" Style="position:fixed; top:10%;left:5%;z-index: 9999999">
                    Higher resolutions can produce long load times. Polygons that produce too many hexes will not have hexes displayed.
                </MudAlert>
            }
            
            <div id="map" style="width:100%; height:700px;"/>
        </MudItem>
        <MudItem xs="12" sm="5">
            <div class="d-flex" style="justify-content: center">
                <MudButton Variant="Variant.Filled" class="mb-1"
                           Color="Color.Primary"
                           OnClick="@(() => { _polygons.Add(new Polygon() { HexColor = "#0000ff" }); })">
                    Add Additional Polygon
                </MudButton>
                <MudSpacer/>
                <MudButton Variant="Variant.Filled" class="mb-1"
                           Color="Color.Primary"
                           OnClick="OpenImport">
                    Import Shapefile
                </MudButton>
                <MudSpacer/>
                <MudSwitch T="bool" Checked="_toggleHexes"
                           CheckedChanged="async () => { _toggleHexes = !_toggleHexes; HandleCheck(); }"
                           Label="H3 Hexes"
                           Color="Color.Info"/>
                <MudSpacer/>
                <MudSelect T="int" @bind-Value="@_hexResolution"
                           Label="Resolution" Variant="Variant.Outlined"
                           AnchorOrigin="Origin.BottomCenter" Style="width: 50px">
                    @for (var i = 1; i <= 10; i++)
                    {
                        <MudSelectItem T="int" Value="i"/>
                    }
                </MudSelect>
            </div>
            @foreach (var polygon in _polygons)
            {
                <MudPaper Class="pa-4">
                    <div class="d-flex">
                        <MudTextField Label="Name" Class="m-3" Variant="Variant.Outlined"
                                      @bind-Value="polygon.Name" For="@(() => polygon.Name)"/>
                        <div style="flex-grow: 0.05"/>
                        <MudSelect Label="Type" class="m-3" Variant="Variant.Outlined"
                                   T="PolygonTypes" @bind-Value="@polygon.Type" For="@(() => polygon.Type)">
                            <MudSelectItem T="PolygonTypes" Value="PolygonTypes.Wkt"></MudSelectItem>
                            <MudSelectItem T="PolygonTypes" Value="PolygonTypes.GeoJson"></MudSelectItem>
                        </MudSelect>
                        <div style="flex-grow: 0.05"/>
                        <MudColorPicker @bind-Text="@polygon.HexColor" Label="Spectrum"
                                        ColorPickerView="ColorPickerView.Spectrum"/>
                        <div style="flex-grow: 0.05"/>
                        <MudButtonGroup Color="Color.Primary" Variant="Variant.Outlined" VerticalAlign="true" OverrideStyles="false">
                            <MudButton Variant="Variant.Outlined" class="ms-3 me-3"
                                       OnClick="@(async () => { await AddPolygon(polygon); })"
                                       Color="Color.Success">
                                Create
                            </MudButton>
                            <MudButton Variant="Variant.Outlined" class="ms-3 me-3 mt-1"
                                       OnClick="@(async () => { await RemovePolygon(polygon.Name); })"
                                       Color="Color.Error">
                                Remove
                            </MudButton>
                        </MudButtonGroup>
                    </div>
                    <div class="d-flex">
                        <div style="flex-grow: 0.05"/>
                        <MudTextField Label="Polygon" Class="mt-3" Variant="Variant.Outlined"
                                      @bind-Value="polygon.RawInput" For="@(() => polygon.RawInput)"/>
                        <div style="flex-grow: 0.05"/>
                    </div>
                </MudPaper>
                <br/>
            }
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private IJSObjectReference? _module;
    private List<Polygon> _polygons = new();
    private List<string> _hexIds = new();
    private bool _toggleHexes = false;
    private int _hexResolution = 1;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _module = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./leaflet.js");
            if (_module != null)
            {
                await _module.InvokeAsync<string>("load_map");

                var defaultPolygon = new Polygon
                {
                    Name = "Default WKT",
                    HexColor = "#0000ff",
                    RawInput = await Http.GetStringAsync("sample-data/defaultWkt.txt"),
                    Type = PolygonTypes.Wkt
                };

                _polygons.Add(defaultPolygon);
                await AddPolygon(defaultPolygon);
                StateHasChanged();
            }
        }
    }

    private async Task HandleCheck()
    {
        var random = new Random();
        if (_toggleHexes)
        {
            foreach (var poly in _polygons)
            {
                var color = $"#{random.Next(0x1000000):X6}";
                try
                {
                    var hexes = GeoUtils.GetH3HexesForPolygon(poly, _hexResolution);
                    foreach (var (id, hex) in hexes)
                    {
                        _hexIds.Add(id);
                        await _module!.InvokeVoidAsync("add_geojson", hex, id, color);
                    }
                }
                catch (ArgumentException e)
                {
                    Snackbar.Add(e.Message, Severity.Error);
                }
            }    
        }
        else
        {
            foreach (var id in _hexIds)
            {
                await RemovePolygon(id);
            }
            _hexIds = new();
        }
    }
    
    // adds a polygon to the map
    private async Task AddPolygon(Polygon poly)
    {
        if (_module != null)
        {
            try
            {
                GeoUtils.PreparePolygon(poly);

                // Ensure there are no duplicates 
                if (_polygons.All(x => x.Name != poly.Name))
                {
                    Snackbar.Add("Cannot add duplicate names", Severity.Error);
                    return;
                }

                // Add the geojson to the map
                await _module.InvokeVoidAsync("add_geojson", poly.RawGeoJson, poly.Name, poly.HexColor);
            }
            catch (ArgumentException e)
            {
                Snackbar.Add(e.Message, Severity.Error);
            }
        }
    }

    public async Task AddPolygons(List<Polygon> polygons)
    {
        foreach (var poly in polygons)
        {
            await AddPolygon(poly);
        }
    }

    // removes a polygon from the map
    private async Task RemovePolygon(string? name)
    {
        if (_module != null)
        {
            // If the name of the polygon isn't null, attempt to remove it from the map via js interop.
            if (!string.IsNullOrEmpty(name))
            {
                await _module.InvokeVoidAsync("remove_geo", name);
            }
            var toRemove = _polygons.FirstOrDefault(x => x.Name == name);

            if (toRemove is not null)
            {
                // if we have more than one polygon, just remove it from the list
                if (_polygons.Count > 1)
                {
                    _polygons.Remove(toRemove);
                }
                // if we only have one, just null out the values
                else
                {
                    toRemove.Name = null;
                    toRemove.RawGeoJson = null;
                    toRemove.RawInput = null;
                    toRemove.HexColor = "#0000ff";
                }
            }
        }
    }
    private async Task OpenImport()
    {
        DialogParameters parameters = new()
        {
            { "PolygonsAddedMethod", EventCallback.Factory.Create<List<Polygon>>(this, AddPolygons) }
        };
        var options = new DialogOptions() { MaxWidth = MaxWidth.Medium, FullWidth = true };
        await DialogService.ShowAsync<FileImportDialog>("File Import", parameters, options);
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (_module is not null)
        {
            await _module.DisposeAsync();
        }
    }

}